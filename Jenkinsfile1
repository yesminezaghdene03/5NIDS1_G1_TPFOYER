pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: 'M2_Home', type: 'ToolLocation'
        PYTHON_VENV = 'venv'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Python3 Venv') {
            steps {
                script {
                    // Vérifier si python3-venv est installé
                    sh '''
                        # Assure-toi que python3-venv est déjà installé sur la machine Jenkins.
                        if ! dpkg -s python3-venv > /dev/null 2>&1; then
                            echo "python3-venv n'est pas installé. Installation requise."
                            apt-get update
                            apt-get install -y python3.10-venv
                        else
                            echo "python3-venv déjà installé."
                        fi
                    '''
                }
            }
        }

        stage('Pre-commit Security Hooks') {
            steps {
                script {
                    echo "Vérification des hooks de sécurité pre-commit"
                    // Installer pre-commit dans un environnement virtuel
                    sh '''
                        echo "pre-commit n'est pas installé, installation dans un environnement virtuel..."
                        python3 -m venv ${PYTHON_VENV}
                        source ${PYTHON_VENV}/bin/activate
                        pip install pre-commit
                        pre-commit install
                    '''
                }
            }
        }

        stage('Compile') {
            steps {
                echo 'Compilation du projet'
                // Ajoute ici les étapes de compilation si nécessaires
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                echo 'Exécution des tests JUnit/Mockito'
                // Ajoute ici les étapes de test si nécessaires
            }
        }

        stage('JaCoCo Report') {
            steps {
                echo 'Génération du rapport JaCoCo'
                // Ajoute ici les étapes de génération du rapport JaCoCo si nécessaires
            }
        }

        stage('JaCoCo coverage report') {
            steps {
                echo 'Génération du rapport de couverture JaCoCo'
                // Ajoute ici les étapes pour le rapport de couverture
            }
        }

        stage('Scan: SonarQube') {
            steps {
                echo 'Scan avec SonarQube'
                // Ajoute ici les étapes pour le scan SonarQube si nécessaires
            }
        }

        stage('Security Scan: Trufflehog') {
            steps {
                echo 'Scan de sécurité avec Trufflehog'
                // Ajoute ici les étapes pour Trufflehog si nécessaires
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                echo 'Scan de sécurité avec OWASP Dependency-Check'
                // Ajoute ici les étapes pour OWASP Dependency-Check si nécessaires
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo 'Déploiement sur Nexus'
                // Ajoute ici les étapes pour déployer sur Nexus si nécessaires
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Construction de l\'image Docker'
                // Ajoute ici les étapes pour construire l'image Docker
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo 'Poussée de l\'image Docker vers DockerHub'
                // Ajoute ici les étapes pour pousser l'image Docker vers DockerHub
            }
        }

        stage('Run Docker Compose') {
            steps {
                echo 'Exécution de Docker Compose'
                // Ajoute ici les étapes pour exécuter Docker Compose
            }
        }

        stage('Declarative: Post Actions') {
            steps {
                mail to: 'aminedridia9@gmail.com',
                     subject: "Build Status: ${currentBuild.currentResult}",
                     body: "The Jenkins build has finished with status: ${currentBuild.currentResult}"
            }
        }
    }
}
