pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'http://192.168.33.10:9000'  // URL de votre serveur SonarQube
        DOCKER_IMAGE = 'myapp'  // Exemple de nom d'image Docker
        DOCKER_TAG = 'latest'
        NEXUS_REPO = 'nexus-repo'  // Remplacez par votre dépôt Nexus
    }

    stages {
        stage('Pre-commit Security Hooks') {
            steps {
                script {
                    echo "Vérification des hooks de sécurité pre-commit"
                    sh '''
                        echo "Installation de pre-commit dans un environnement virtuel..."
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install pre-commit
                        git config --unset-all core.hooksPath  # Réinitialiser la configuration
                        pre-commit install  # Installer les hooks
                    '''
                }
            }
        }

        stage('Compile') {
            steps {
                echo "Compilation du code"
                // Ajoutez ici les commandes nécessaires pour la compilation
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                echo "Exécution des tests JUnit/Mockito"
                // Ajoutez ici les commandes pour exécuter les tests unitaires
            }
        }

        stage('Static Code Analysis: SonarQube') {
            steps {
                echo "Analyse SonarQube"
                sh '''
                    mvn clean install sonar:sonar -Dsonar.host.url=${SONARQUBE_SERVER}
                '''
            }
        }

        stage('Security Scan: Trufflehog') {
            steps {
                echo "Scan de sécurité avec Trufflehog"
                // Ajoutez ici les commandes pour Trufflehog
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Création de l'image Docker"
                sh '''
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                '''
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo "Push de l'image Docker vers DockerHub"
                sh '''
                    docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                '''
            }
        }

        stage('Run Docker Compose') {
            steps {
                echo "Exécution de Docker Compose"
                sh '''
                    docker-compose up -d
                '''
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo "Déploiement vers Nexus"
                // Ajoutez ici les commandes pour déployer vers Nexus
            }
        }

        stage('Post Actions') {
            steps {
                echo "Actions post-build"
                // Ajoutez ici les actions post-build nécessaires
            }
        }
    }

    post {
        success {
            echo "Pipeline terminé avec succès"
        }
        failure {
            echo "Le build a échoué"
            emailext (
                to: 'aminedridia9@gmail.com',
                subject: "Échec du pipeline Jenkins",
                body: "Le pipeline Jenkins a échoué. Veuillez vérifier les logs pour plus de détails."
            )
        }
    }
}
