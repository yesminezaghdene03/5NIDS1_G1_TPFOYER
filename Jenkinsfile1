pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_Home'
    }

    stages {
        // Étape de récupération du code
        stage('GIT') {
            steps {
                git branch: 'Nawelhammami-5NIDS1-G1', 
                url: 'https://github.com/MohamedKhalil-Mzali/5NIDS-G1-ProjetDevOps.git'
            }
        }

        // Étape de gestion de l'environnement Python et de l'installation de pre-commit
        stage('Pre-commit Security Hooks') {
            steps {
                script {
                    sh '''
                    if ! command -v python3 &> /dev/null
                    then
                        echo "Python3 n'est pas installé, veuillez l'installer avant de continuer."
                        exit 1
                    fi
                    
                    # Créer un environnement virtuel si nécessaire
                    if [ ! -d "venv" ]; then
                        python3 -m venv venv
                    fi
                    source venv/bin/activate
                    pip install --upgrade pip
                    pip install pre-commit

                    git config --unset-all core.hooksPath
                    pre-commit install
                    pre-commit run --all-files
                    '''
                }
            }
        }

        // Étape de compilation
        stage('Compile Stage') {
            steps {
                sh 'mvn clean compile'
            }
        }

        // Étape de tests unitaires avec JUnit/Mockito
        stage('JUnit/Mockito Tests') {
            steps {
                sh 'mvn test'
            }
        }

        // Étape de génération du rapport JaCoCo
        stage('JaCoCo Report') {
            steps {
                sh 'mvn jacoco:report'
            }
        }

        // Étape de publication du rapport JaCoCo
        stage('JaCoCo coverage report') {
            steps {
                step([$class: 'JacocoPublisher',
                      execPattern: '**/target/jacoco.exec',
                      classPattern: '**/classes',
                      sourcePattern: '**/src',
                      exclusionPattern: '*/target/**/,**/*Test*,**/*_javassist/**'
                ])
            }
        }

        // Étapes de sécurité (SonarQube, Nmap, OWASP Dependency-Check)
        stage('Scan : SonarQube') {
            steps {
                withSonarQubeEnv('sq1') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Security Scan: Nmap') {
            steps {
                script {
                    echo "Starting Nmap Security Scan..."
                    sh 'sudo nmap -sS -p 1-65535 -v localhost'
                }
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                script {
                    echo "Starting OWASP Dependency-Check..."
                    sh 'mvn org.owasp:dependency-check-maven:check'
                }
            }
        }

        // Étapes de déploiement (Nexus, Docker, Docker Compose)
        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy -DskipTests -DaltDeploymentRepository=deploymentRepo::default::http://192.168.33.10:8081/repository/maven-releases/'
            }
        }

        stage('Building image') {
            steps {
                sh 'docker build -t nawel119/gestion-station-ski:1.0.0 .'
            }
        }

        stage('Deploy image') {
            steps {
                withCredentials([string(credentialsId: 'dockerhub-jenkins-token', variable: 'dockerhub_token')]) {
                    sh "docker login -u nawel119 -p ${dockerhub_token}"
                    sh 'docker push nawel119/gestion-station-ski:1.0.0'
                }
            }
        }

        stage('Docker compose') {
            steps {
                sh 'docker compose up -d'
            }
        }

        // Étape de démarrage du monitoring des conteneurs
        stage('Start Monitoring Containers') {
            steps {
                sh 'docker start be79135ec1cc'
            }
        }

        // Étape de notification par email
        stage('Email Notification') {
            steps {
                mail bcc: '', 
                     body: '''
Final Report: The pipeline has completed successfully. No action required.
''', 
                     cc: '', 
                     from: '', 
                     replyTo: '', 
                     subject: 'Succès de la pipeline DevOps Project', 
                     to: 'aminedridia9@gmail.com'
            }
        }
    }

    post {
        success {
            script {
                emailext (
                    subject: "Build Success: ${currentBuild.fullDisplayName}",
                    body: "Le build a réussi ! Consultez les détails à ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                    to: 'aminedridia9@gmail.com'
                )
            }
        }
        failure {
            script {
                emailext (
                    subject: "Build Failure: ${currentBuild.fullDisplayName}",
                    body: "Le build a échoué ! Vérifiez les détails à ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                    to: 'aminedridia9@gmail.com'
                )
            }
        }
        always {
            script {
                emailext (
                    subject: "Build Notification: ${currentBuild.fullDisplayName}",
                    body: "Consultez les détails du build à ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                    to: 'aminedridia9@gmail.com'
                )
            }
        }
    }
}
