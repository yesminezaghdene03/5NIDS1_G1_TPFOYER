pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'my-image'
        DOCKER_TAG = 'latest'
    }
    stages {
        stage('Declarative: Checkout SCM') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t docker.io/library/${DOCKER_IMAGE}:${DOCKER_TAG} .'
                }
            }
        }
        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin'
                        sh 'docker push docker.io/library/${DOCKER_IMAGE}:${DOCKER_TAG}'
                    }
                }
            }
        }
        stage('Docker Compose Down') {
            steps {
                echo 'Stopping Docker containers'
                sh 'docker-compose down'
            }
        }
        stage('Docker Compose Up') {
            steps {
                echo 'Starting Docker containers'
                sh 'docker-compose up -d'
            }
        }
        stage('Prometheus') {
            steps {
                echo 'Prometheus monitoring'
                // Add Prometheus setup commands here
            }
        }
        stage('Grafana') {
            steps {
                echo 'Grafana dashboard setup'
                // Add Grafana setup commands here
            }
        }
        stage('Cleanup Old Docker Images') {
            steps {
                echo 'Cleaning up old Docker images'
                sh 'docker image prune -f'
            }
        }
    }
    post {
        always {
            emailext to: 'aminedridia9@gmail.com', subject: 'Jenkins Pipeline Result', body: 'The Jenkins pipeline has finished running.'
        }
    }
}
