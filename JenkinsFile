pipeline {
    agent any

    environment {
        // Définir l'URL de Nexus et le nom du credential de Nexus
        NEXUS_URL = "http://192.168.50.4:8081/repository/myRepo/"
        NEXUS_CREDENTIAL_ID = "nexusCredential"  // ID des informations d'identification Nexus configurées dans Jenkins
        DOCKER_COMPOSE_VERSION = '1.29.2'  // Version de Docker Compose que vous souhaitez utiliser
        DOCKER_IMAGE_NAME = 'emna0203/emnabelkhiria-5nids1'  // Nom de l'image Docker
        DOCKER_TAG = 'latest'  // Tag de l'image Docker
        SONARQUBE_TOKEN = 'sqp_bc225e0c7bd8daa746a774a9dcc9a6e5cd548f0e'  // Nouveau token SonarQube
    }

    stages {
        stage('SCM Checkout') {
            steps {
                // Cloner le dépôt et se placer sur la branche EmnaBelkhiria_NIDS1_G1
                git branch: 'EmnaBelkhiria_NIDS1_G1', url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER.git'
            }
        }

        stage('Build') {
            steps {
                // Construire le projet avec Maven
                sh 'mvn clean install'
            }
        }

        stage('Test') {
            steps {
                // Lancer les tests
                sh 'mvn test'
            }
        }

        stage('Package') {
            steps {
                // Packager le projet
                sh 'mvn package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube Server') {
                    // Lancer l'analyse SonarQube
                    sh "mvn sonar:sonar -Dsonar.projectKey=5NIDS1_G1_TPFOYER -Dsonar.projectName='5NIDS1_G1_TPFOYER'"
                }
            }
        }

        stage('Deployment Nexus') {
            steps {
                sh "mvn deploy -Dmaven.test.skip=true -DaltDeploymentRepository=deploymentRepo::default::http://192.168.50.4:8081/repository/myRepo/"
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Construire l'image Docker
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    // Pousser l'image Docker
                    sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Exécuter Docker Compose pour démarrer les services
                    sh "docker-compose up -d"
                    // Vérifier si le service est bien lancé
                    sh "docker-compose ps"
                }
            }
        }

        stage('Cleanup') {
            steps {
                // Arrêter les services Docker après le test
                sh 'docker-compose down'
                // Nettoyer les ressources Docker
                sh 'docker system prune -f'
            }
        }
    }

    post {
        always {
            // Toujours afficher le contenu du répertoire des rapports et archiver les artefacts
            sh 'echo "Listing directory contents:"'
            sh 'ls -R target/surefire-reports/'  // Liste les fichiers dans 'surefire-reports'
            junit '**/target/surefire-reports/*.xml'  // Publier les rapports de tests
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true  // Archiver les artefacts générés
        }
        success {
            echo 'Build and deployment successful!'
            mail to: 'emnabelkhiria7@gmail.com',
                 subject: "Build Success - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The build was successful! Check the details at ${env.BUILD_URL}"
        }
        failure {
            mail to: 'emnabelkhiria7@gmail.com',
                 subject: "Build Failure - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The build failed. Please check the details at ${env.BUILD_URL}"
        }
    }
}
