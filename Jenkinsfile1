pipeline {
    agent any

    environment {
        NEXUS_URL = 'http://192.168.33.10:8081' // Remplace par ton URL Nexus
        NEXUS_REPO = 'maven-releases' // Remplace par ton dépôt Nexus
    }

    stages {

        // Phase Pré-Commit
        stage('Pre-Commit: Code Linting') {
            steps {
                echo 'Exécution de Linting'
                sh 'mvn clean install -Dcheckstyle.skip=true'  // Java Checkstyle pour linting
            }
        }

        stage('Pre-Commit: Secrets Scanning') {
            steps {
                echo 'Scan des Secrets avec Trufflehog'
                sh '''
                    # Installer Trufflehog si non installé
                    if ! command -v trufflehog &> /dev/null; then
                        echo "Trufflehog non trouvé, installation en cours..."
                        pip install trufflehog
                    else
                        echo "Trufflehog déjà installé"
                    fi
                    trufflehog filesystem --directory . --json
                '''
            }
        }

        // Phase Commit
        stage('Commit: Clone du Repository') {
            steps {
                echo 'Clonage du Repository'
                git url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER.git', branch: 'WassimBELHAJSALEM-5NIDS1-G1'
            }
        }

        stage('Commit: Clean') {
            steps {
                sh 'mvn clean'
            }
        }

        stage('Commit: Compilation avec Maven') {
            steps {
                sh 'mvn compile'
            }
        }

        // Phase Acceptance
        stage('Acceptance: Tests Unitaires') {
            steps {
                echo 'Exécution des Tests Unitaires'
                sh 'mvn test'
            }
        }

        stage('Acceptance: Analyse de la Qualité du Code') {
            steps {
                echo 'Exécution de l\'Analyse SonarQube'
                withSonarQubeEnv(installationName: 'sq1') {
                    sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar'
                }
            }
        }

        stage('Acceptance: Scan des Dépendances') {
            steps {
                echo 'Exécution du Scan des Dépendances'
                sh 'mvn org.owasp:dependency-check-maven:check' // OWASP Dependency-Check
            }
        }

        stage('Acceptance: Packaging sans Tests') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }

        stage('Acceptance: Tests de Sécurité') {
            steps {
                echo 'Exécution des Tests de Sécurité'
                sh 'bandit -r .' // Exemple : Bandit pour Python (remplace par l'outil adapté à ton langage)
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo 'Déploiement vers Nexus'

                script {
                    if (!fileExists('target/tp-foyer-5.0.0.jar')) {
                        error("Le fichier JAR n'existe pas: target/tp-foyer-5.0.0.jar.original")
                    }
                }

                withCredentials([usernamePassword(credentialsId: 'nexusCredential', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh """
                    mvn -s /usr/share/maven/conf/settings.xml deploy:deploy-file \
                      -DgroupId=com.example \
                      -DartifactId=tp-foyer \
                      -Dversion=5.0.0 \
                      -Dpackaging=jar \
                      -Dfile=target/tp-foyer-5.0.0.jar \
                      -DrepositoryId=deploymentRepo \
                      -Durl=$NEXUS_URL/repository/$NEXUS_REPO/ \
                      -Dusername=$NEXUS_USERNAME \
                      -Dpassword=$NEXUS_PASSWORD
                    """
                }
            }
        }

        // Phase Operations en Production
        stage('Création de l\'Image Docker') {
            steps {
                echo 'Création de l\'Image Docker'
                sh 'docker build -t wassimbhs/tp-foyer:1.0.0 .'
            }
        }

        stage('Scan des Vulnérabilités de l\'Image Docker') {
            steps {
                echo 'Scan de l\'Image Docker pour les Vulnérabilités'
                sh 'trivy image wassimbhs/tp-foyer:1.0.0' // Scan de l'image avec Trivy
            }
        }

        stage('Push de l\'Image vers Dockerhub') {
            steps {
                echo 'Push de l\'Image vers Dockerhub'
                withCredentials([usernamePassword(credentialsId: 'dockerhubCredential', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                    echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                    docker push "$DOCKER_USERNAME/tp-foyer:1.0.0"
                    """
                }
            }
        }

        stage('Déploiement avec Docker Compose') {
            steps {
                echo 'Démarrage Backend + DB avec Docker Compose'
                sh 'docker compose up -d'
            }
        }
    }

    post {
        always {
            cleanWs() // Nettoyer l'espace de travail après le build
        }

        failure {
            mail to: 'aminedridia9@gmail.com',
                 subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Le job de build '${env.JOB_NAME}' a échoué lors du build #${env.BUILD_NUMBER}. Veuillez consulter les logs pour plus de détails."
        }
    }
}
