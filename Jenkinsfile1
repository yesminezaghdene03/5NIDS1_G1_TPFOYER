pipeline {
    agent any

    environment {
        DOCKER_USERNAME = "aminedridia"  // Utilisateur DockerHub
        DOCKER_PASSWORD = "aminedridia"  // Mot de passe DockerHub
        IMAGE_NAME = "your-image-name"   // Nom de l'image Docker
        IMAGE_TAG = "latest"             // Tag de l'image Docker
    }

    stages {
        stage('Pre-Commit') {
            steps {
                script {
                    // Désactiver la configuration core.hooksPath pour permettre l'installation des hooks
                    sh 'git config --unset-all core.hooksPath'

                    // Préparer l'environnement Python et installer les outils nécessaires
                    sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install pre-commit
                    pre-commit install
                    '''
                }
            }
        }

        stage('Static Code Analysis: FindSecurityBugs') {
            steps {
                script {
                    // Lancer l'analyse avec FindSecurityBugs ici
                    echo "Static Code Analysis: FindSecurityBugs"
                }
            }
        }

        stage('Static Code Analysis: SonarQube') {
            steps {
                script {
                    // Lancer l'analyse SonarQube ici
                    echo "Static Code Analysis: SonarQube"
                }
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                script {
                    // Exécuter les tests JUnit/Mockito ici
                    echo "JUnit/Mockito Tests"
                }
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                script {
                    // Lancer l'analyse de sécurité OWASP Dependency-Check ici
                    echo "Security Scan: OWASP Dependency-Check"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG .'
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    // Push Docker image to DockerHub
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                        sh 'docker push $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG'
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    // Exécuter Docker Compose ici
                    echo "Run Docker Compose"
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    // Déployer l'application sur Nexus
                    echo "Deploy to Nexus"
                }
            }
        }

        stage('Declarative: Post Actions') {
            steps {
                script {
                    // Envoyer des notifications par email après le build
                    emailext to: 'aminedridia9@gmail.com',
                             subject: "Build Status",
                             body: "Build has finished. Status: ${currentBuild.currentResult}"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up'
            cleanWs()
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
