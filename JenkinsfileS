pipeline {
    agent any

    tools {
        git 'Default'
        maven 'M2_HOME'
        jdk 'JAVA_HOME'
    }

    environment {
        DOCKER_IMAGE_NAME = 'tp-foyer/docker'
        DOCKER_TAG = '5.0.0'
        VAULT_ADDR = 'http://127.0.0.1:8200' // Adresse de Vault
        PATH = "$PATH:/home/vagrant/.local/bin:/usr/local/bin" // Ajout du chemin de Trivy
        VAULT_TOKEN = credentials('JENKINS_VAULT_TOKENN') // Utilisation d'un secret Jenkins pour le token Vault
    }

    stages {
        // Phase de Développement
        stage('Checkout') {
            steps {
                git branch: 'YesminZaghden_NIDS1_G1', url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER.git'
            }
        }

        stage('Install Pre-Commit') {
            steps {
                sh 'pip install --user pre-commit'
            }
        }

        stage('Run Pre-Commit Hooks') {
            steps {
                sh 'pre-commit run --all-files'
            }
        }

        stage('Verify Changes') {
            steps {
                sh 'git status'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        // Phase d'Acceptation
        stage('Acceptance Tests') {
            steps {
                sh 'mvn test || echo "Acceptance tests failed. Review required."'
            }
        }

        stage('Dependency Check') {
            steps {
                script {
                    // Force la mise à jour des données CVE avant l'analyse pour éviter les erreurs de cache
                    sh 'mvn org.owasp:dependency-check-maven:update-only'

                    // Lancement de l'analyse des dépendances avec logs détaillés et gestion d'erreurs
                    sh '''
                        mvn -X org.owasp:dependency-check-maven:check -Dformat=HTML -DoutputDirectory=target || echo "Dependency check failed. Review required."
                    '''
                }
            }
        }

        // Phase de Production
        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    // Effectuer le scan Trivy et générer un rapport JSON
                    sh "trivy image --format json --output trivy-report.json ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || echo 'Security scan failed. Review required.'"

                    // Convertir le rapport JSON en HTML avec un script Python (assurez-vous que le script convert_to_html.py est présent)
                    sh 'python3 convert_to_html.py'

                    // Déplacer le rapport HTML dans le répertoire des rapports
                    sh 'mkdir -p $WORKSPACE/reports'  // Créer le répertoire des rapports
                    sh 'mv trivy-report.html $WORKSPACE/reports/'  // Déplacer le fichier HTML dans ce répertoire
                }
            }
        }

        stage('Upload Artifact') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '192.168.50.4:8081', // Ajout du protocole http://
                    groupId: 'tn.esprit',
                    version: '5.0.0',
                    repository: 'tp-foyer2',
                    credentialsId: 'nexus-credentials',
                    artifacts: [
                        [artifactId: 'tp-foyer', classifier: '', file: 'target/tp-foyer-5.0.0.jar', type: 'jar']
                    ]
                )
            }
        }

        // Phase des Opérations
        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        // Se connecter à Docker Hub avec les credentials Jenkins
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"

                        // Pousser l'image dans Docker Hub avec le bon nom d'utilisateur
                        sh "docker push yesmin1/tp-foyer:5.0.0"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh "docker-compose up -d"
                }
            }
        }

        stage('Start Prometheus') {
            steps {
                script {
                    sh 'docker start prometheus'
                }
            }
        }

        stage('Start Grafana') {
            steps {
                script {
                    sh 'docker start grafana'
                }
            }
        }

        stage('Vault Initialization') {
            steps {
                script {
                    sh "export VAULT_TOKEN=${env.VAULT_TOKEN}"
                    sh 'vault status' // Vérifie la connexion au Vault
                }
            }
        }

        stage('Use Vault Secrets') {
            steps {
                script {
                    // Récupérer un secret de Vault
                    def secret = sh(script: 'vault kv get -field=value secret/my-secret', returnStdout: true).trim()
                    echo "Vault secret: ${secret}"  // Utiliser le secret récupéré
                }
            }
        }
    }

    post {
        always {
            // Debugging step to check the directory structure
            sh 'echo "Listing directory contents:"'
            sh 'ls -R target/surefire-reports/'  // This will list the files in the 'surefire-reports' folder

            // Then, attempt to gather JUnit reports
            junit '**/target/surefire-reports/*.xml'
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true

            // Ajouter l'archivage du rapport Trivy HTML
            archiveArtifacts artifacts: 'reports/trivy-report.html', allowEmptyArchive: true
        }
        success {
            echo 'Build and deployment successful!'
            mail to: 'yesminzaghden1@gmail.com',
                 subject: "Build Success - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The build was successful! Check the details at ${env.BUILD_URL}"
        }
        failure {
            mail to: 'yesminzaghden1@gmail.com',
                 subject: "Build Failure - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The build failed. Please check the details at ${env.BUILD_URL}"
        }
    }
}
