pipeline {
    agent any

    environment {
        NEXUS_URL = "http://192.168.50.4:8081/repository/myRepo/"
        NEXUS_CREDENTIAL_ID = "nexusCredential"
        DOCKER_COMPOSE_VERSION = '1.29.2'
        DOCKER_IMAGE_NAME = 'emna0203/emnabelkhiria-5nids1'
        DOCKER_TAG = 'latest'
        SONARQUBE_TOKEN = 'sqp_bc225e0c7bd8daa746a774a9dcc9a6e5cd548f0e'
    }

    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'EmnaBelkhiria_NIDS1_G1', url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Package') {
            steps {
                sh 'mvn package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube Server') {
                    sh "mvn sonar:sonar -Dsonar.projectKey=5NIDS1_G1_TPFOYER -Dsonar.projectName='5NIDS1_G1_TPFOYER' -Dsonar.login=${SONARQUBE_TOKEN}"
                }
            }
        }

        stage('Deployment Nexus') {
            steps {
                sh "mvn deploy -Dmaven.test.skip=true -DaltDeploymentRepository=deploymentRepo::default::${NEXUS_URL}"
            }
        }

        stage('Docker Pull') {
            steps {
                sh "docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
            }
        }

        stage('Deploy') {
            steps {
                sh "docker-compose up -d"
                sh "docker-compose ps"
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "Vérification de l'état de santé du conteneur"
                    sh 'sleep 10' // Temps d'attente pour permettre le lancement du conteneur
                    try {
                        def containerID = sh(script: "docker ps -q --filter 'ancestor=${DOCKER_IMAGE_NAME}:${DOCKER_TAG}'", returnStdout: true).trim()
                        if (containerID) {
                            def hasHealthCheck = sh(script: "docker inspect --format='{{.State.Health}}' ${containerID}", returnStdout: true).trim()
                            if (hasHealthCheck != "null") {
                                // Intégration de retry ici
                                retry(5) {
                                    def healthStatus = sh(script: "docker inspect --format='{{.State.Health.Status}}' ${containerID}", returnStdout: true).trim()
                                    if (healthStatus == 'healthy') {
                                        echo "Le conteneur est en bonne santé."
                                        return // Sortir du retry si le conteneur est sain
                                    } else {
                                        echo "Le conteneur n'est pas encore en bonne santé, attente..."
                                        sleep(10)  // Attendre avant de vérifier à nouveau
                                    }
                                }
                            } else {
                                echo "Le conteneur n'a pas de configuration de vérification de l'état de santé."
                            }
                        } else {
                            error("Conteneur introuvable pour l'image ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}.")
                        }
                    } catch (Exception e) {
                        error("Erreur lors de la vérification de l'état de santé du conteneur : ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Nmap Open Port Verification') {
            steps {
                script {
                    echo "Attente pour le démarrage complet des conteneurs"
                    def containerStatus, containerIP
                    def allowedPort = 8089

                    retry(5) { // Tenter plusieurs fois pour récupérer l'IP
                        sleep(time: 1, unit: 'MINUTES')
                        containerStatus = sh(script: "docker-compose ps -q app", returnStdout: true).trim()
                        if (!containerStatus) {
                            error("Le conteneur app n'a pas démarré correctement.")
                        }
                        containerIP = sh(script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${containerStatus}", returnStdout: true).trim()
                        if (!containerIP) {
                            error("Échec de la résolution de l'adresse IP du conteneur.")
                        }
                    }

                    def nmapOutput = sh(script: "nmap -p- ${containerIP}", returnStdout: true).trim()
                    echo "Raw Nmap scan output:\n${nmapOutput}"

                    def openPorts = []
                    def lines = nmapOutput.split('\n')
                    lines.each { line ->
                        if (line.contains("open")) {
                            def portInfo = line.split("\\s+")[0]
                            def portNumber = portInfo.split("/")[0]
                            echo "Found open port: ${portNumber}"
                            openPorts.add(portNumber as Integer)
                        }
                    }
                    echo "Open ports: ${openPorts.join(', ')}"
                    if (openPorts.size() != 1 || openPorts[0] != allowedPort) {
                        error("Build failed: Ports other than ${allowedPort} are open.")
                    } else {
                        echo "Only port ${allowedPort} is open. Proceeding with the build."
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    def networkName = sh(script: "docker network ls --filter 'driver=bridge' --format '{{.Name}}' | grep '_default'", returnStdout: true).trim()
                    if (networkName) {
                        echo "Le réseau Docker Compose est : ${networkName}"
                        sh "docker-compose down"
                    } else {
                        echo "Aucun réseau Docker Compose trouvé."
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def networkName = sh(script: "docker network ls --filter 'driver=bridge' --format '{{.Name}}' | grep '_default'", returnStdout: true).trim()
                if (networkName) {
                    echo "Le réseau Docker Compose est : ${networkName}"
                    sh "docker-compose down"
                } else {
                    echo "Aucun réseau Docker Compose trouvé."
                }
            }
        }
    }
}
