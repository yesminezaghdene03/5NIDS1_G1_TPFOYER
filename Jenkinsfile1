pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }

    stages {
        // Étape GIT : Récupérer le code depuis le dépôt
        stage('GIT') {
            steps {
                git branch: 'AmineDridia_5NIDS1_G1',
                    url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER'
            }
        }

        // Étape de pré-commit : Installation et exécution des hooks de sécurité
        stage('Pre-commit Security Hooks') {
            steps {
                script {
                    sh '''
                    if ! command -v pre-commit &> /dev/null
                    then
                        echo "pre-commit n'est pas installé, installation dans un environnement virtuel..."
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install pre-commit
                    fi
                    git config --unset-all core.hooksPath
                    pre-commit install
                    pre-commit run --all-files
                    '''
                }
            }
        }

        // Étape de compilation avec Maven
        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        // Étape des tests unitaires : JUnit/Mockito
        stage('JUnit/Mockito Tests') {
            steps {
                sh 'mvn test'
            }
        }

        // Analyse de la couverture du code avec JaCoCo
        stage('JaCoCo Report') {
            steps {
                sh 'mvn jacoco:report'
            }
        }

        // Publication du rapport JaCoCo
        stage('JaCoCo coverage report') {
            steps {
                step([$class: 'JacocoPublisher',
                      execPattern: '**/target/jacoco.exec',
                      classPattern: '**/classes',
                      sourcePattern: '**/src',
                      exclusionPattern: '*/target/**/,**/*Test*,**/*_javassist/**'
                ])
            }
        }

        // Analyse de la qualité du code avec SonarQube
        stage('Scan: SonarQube') {
            steps {
                withSonarQubeEnv('sq1') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        // Étape de sécurité : Scan avec Trufflehog pour détecter les secrets dans le code
        stage('Security Scan: Trufflehog') {
            steps {
                script {
                    echo "Démarrage du scan de sécurité Trufflehog..."
                    sh 'trufflehog filesystem --directory . --json'
                }
            }
        }

        // Étape de sécurité : Scan des dépendances avec OWASP Dependency-Check
        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                script {
                    echo "Démarrage du scan OWASP Dependency-Check..."
                    sh 'mvn org.owasp:dependency-check-maven:check'
                }
            }
        }

        // Déploiement de l'application sur Nexus
        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy -DskipTests -DaltDeploymentRepository=deploymentRepo::default::http://192.168.33.10:8081/repository/maven-releases/'
            }
        }

        // Création de l'image Docker
        stage('Build Docker Image') {
            steps {
                sh 'sudo docker build -t aminedridia/tp-foyer:5.0.0 .'
            }
        }

        // Push de l'image Docker vers DockerHub
        stage('Push Docker Image to DockerHub') {
            steps {
                sh '''
                    sudo docker login -u aminedridia -p adminamine
                    sudo docker push aminedridia/tp-foyer:5.0.0
                '''
            }
        }

        // Exécution de Docker Compose
        stage('Run Docker Compose') {
            steps {
                script {
                    sh '''
                        sudo docker-compose down 
                        sudo docker-compose up -d
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Build and deployment successful!'
            mail to: 'aminedridia9@gmail.com',
                 subject: "Build Success - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The build was successful! Check the details at ${env.BUILD_URL}"
        }
        failure {
            mail to: 'aminedridia9@gmail.com',
                 subject: "Build Failure - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The build failed. Please check the details at ${env.BUILD_URL}"
        }
    }
}
