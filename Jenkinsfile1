pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'myapp'  // Nom de l'image Docker
        DOCKER_USERNAME = credentials('dockerhub-credentials').username  // Utilisateur DockerHub
        DOCKER_PASSWORD = credentials('dockerhub-credentials').password  // Mot de passe DockerHub
        // Ajout du chemin où pre-commit est installé
        PATH = "/var/lib/jenkins/.local/bin:$PATH"  
    }
    stages {
        // Stage de récupération du code depuis le dépôt Git
        stage('Checkout') {
            steps {
                checkout scm  // Récupérer les modifications du dépôt
            }
        }

        // Stage pour installer et configurer pre-commit
        stage('Install pre-commit') {
            steps {
                script {
                    echo "Installing pre-commit..."
                    // Création d'un environnement virtuel pour pre-commit
                    sh 'python3 -m venv venv'  // Créer un environnement virtuel
                    sh '. venv/bin/activate'  // Activer l'environnement virtuel
                    sh 'pip install pre-commit'  // Installer pre-commit
                }
            }
        }

        // Stage pour effectuer une analyse statique avec OWASP Dependency-Check
        stage('Static Code Analysis: OWASP Dependency-Check') {
            steps {
                script {
                    echo "Running OWASP Dependency-Check..."
                    // Effectuer une analyse avec OWASP Dependency-Check
                    sh 'mvn clean install -DskipTests'  // Construire le projet sans tester
                    sh 'mvn org.owasp:dependency-check-maven:check'  // Exécuter l'analyse de sécurité
                }
            }
        }

        // Stage pour exécuter les tests unitaires avec JUnit et Mockito
        stage('JUnit/Mockito Tests') {
            steps {
                echo "Running Unit Tests..."
                // Exécuter les tests unitaires avec Maven
                sh 'mvn test'
            }
        }

        // Stage pour construire l'image Docker
        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image..."
                // Construire l'image Docker
                sh 'docker build -t $DOCKER_IMAGE .'  // Construire l'image Docker
            }
        }

        // Stage pour pousser l'image Docker sur DockerHub
        stage('Push Docker Image to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    echo "Pushing Docker Image to DockerHub..."
                    // Se connecter à DockerHub et pousser l'image
                    sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                    sh "docker push $DOCKER_IMAGE"
                }
            }
        }
    }

    post {
        always {
            // Envoi de la notification par email après l'exécution du pipeline
            emailext to: 'aminedridia9@gmail.com',
                     subject: 'Build Finished',
                     body: 'The build is complete.'
        }

        // Envoi de la notification par email si le build échoue
        failure {
            emailext to: 'aminedridia9@gmail.com',
                     subject: 'Build Failed',
                     body: 'The build has failed. Please check the Jenkins logs for details.'
        }
    }
}
