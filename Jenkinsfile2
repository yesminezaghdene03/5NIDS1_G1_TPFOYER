pipeline {
    agent any

    stages {
        stage ('Git Checkout') {
            steps {
                git branch: 'hadhemiOmrani_5NIDS_G1', url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER.git'
            }
        }
        
        stage ('UNIT Testing') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage ('Integration Testing') {
            steps {
                sh 'mvn verify'
            }
        }
        
        stage ('Maven Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        
        stage('Code Coverage') {
            steps {
                jacoco()
            }
        }

        stage ('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonar-api-key') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
        }
        
        stage ('Quality Gate Status') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-api-key'
                }
            }
        }
        
        stage ('OWASP Dependency-Check') {
            steps {
                dependencyCheck additionalArguments: '--scan .', 
                                odcInstallation: 'DP-check'
            }
        }
        
        stage('Archive Dependency-Check Report') {
            steps {
                archiveArtifacts artifacts: 'dependency-check-report.xml', allowEmptyArchive: true
            }
        }

        stage('Publish Dependency-Check Results') {
            steps {
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }

        stage ('Nexus') {
            steps {
                script {
                    def readPomVersion = readMavenPom file: 'pom.xml'
                    def version = readPomVersion.version
                    def repository = version.endsWith("SNAPSHOT") ? "tpfoyer-snapshot" : "Tpfoyer-Release"

                    nexusArtifactUploader artifacts: [
                        [
                            artifactId: 'tp-foyer', 
                            classifier: '', 
                            file: 'target/Uterk.jar', 
                            type: 'jar'
                        ]
                    ], 
                    credentialsId: 'nexus-auth', 
                    groupId: 'tn.esprit', 
                    nexusUrl: '192.168.1.170:8081', 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: repository, 
                    version: "${readPomVersion.version}"
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script {
                    sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .'
                    sh 'docker image tag $JOB_NAME:v1.$BUILD_ID omranihadhemi/$JOB_NAME:v1.$BUILD_ID'
                    sh 'docker image tag $JOB_NAME:v1.$BUILD_ID omranihadhemi/$JOB_NAME:latest'
                }
            }
        }

        // Étape Trivy Scan pour analyser les vulnérabilités
        stage('Trivy Vulnerability Scan') {
            steps {
                script {
                    // Exécution de Trivy pour scanner l'image Docker construite
                    sh 'docker run --rm -v /var/lib/jenkins/workspace/devsecops:/workspace -v $HOME/.cache/trivy:/root/.cache/ aquasec/trivy image --severity HIGH,CRITICAL omranihadhemi/$JOB_NAME:v1.$BUILD_ID > trivy-report.txt'
                }
            }
        }

        // Étape pour archiver le rapport Trivy
        stage('Archive Trivy Report') {
            steps {
                archiveArtifacts artifacts: 'trivy-report.txt', allowEmptyArchive: true
            }
        }

        stage ('Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhub_pwd', variable: 'docker_hub_cred')]) {
                        sh 'docker login -u omranihadhemi -p ${docker_hub_cred}'
                        sh 'docker image push omranihadhemi/$JOB_NAME:v1.$BUILD_ID'
                        sh 'docker image push omranihadhemi/$JOB_NAME:latest'
                    }
                }
            }
        }
    }
}
