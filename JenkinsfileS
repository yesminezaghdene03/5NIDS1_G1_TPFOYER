pipeline {
    agent any

    tools {
        git 'Default'
        maven 'M2_HOME'
        jdk 'JAVA_HOME'
    }

    environment {
        DOCKER_IMAGE_NAME = 'tp-foyer'
        DOCKER_TAG = '5.0.0'
        VAULT_ADDR = 'http://127.0.0.1:8200' // Adresse de Vault
        PATH = "$PATH:/home/vagrant/.local/bin:/usr/local/bin" // Ajout du chemin de Trivy
        VAULT_TOKEN = credentials('JENKINS_VAULT_TOKEN') // Utilisation d'un secret Jenkins pour le token Vault
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'YesminZaghden_NIDS1_G1', url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER.git'
            }
        }

        stage('Install Pre-Commit') {
            steps {
                sh 'pip install --user pre-commit'
            }
        }

        stage('Run Pre-Commit Hooks') {
            steps {
                sh 'pre-commit run --all-files'
            }
        }

        stage('Verify Changes') {
            steps {
                sh 'git status'
            }
        }

        stage('Vault Initialization') {
            steps {
                script {
                    // Utilisation du token Vault à partir des variables d'environnement Jenkins
                    sh "export VAULT_TOKEN=${env.VAULT_TOKEN}"
                    sh 'vault status' // Vérifie la connexion au Vault
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Security Scan') {
            steps {
                sh 'trivy image ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || echo "Security scan failed. Review required."'
            }
        }

        stage('Dependency Check') {
            steps {
                script {
                    // Force la mise à jour des données CVE avant l'analyse pour éviter les erreurs de cache
                    sh 'mvn org.owasp:dependency-check-maven:update-only'

                    // Lancement de l'analyse des dépendances avec logs détaillés et gestion d'erreurs
                    sh '''
                        mvn -X org.owasp:dependency-check-maven:check -Dformat=HTML -DoutputDirectory=target || echo "Dependency check failed. Review required."
                    '''
                }
            }
        }

        stage('Acceptance Tests') {
            steps {
                sh 'mvn test || echo "Acceptance tests failed. Review required."'
            }
        }

        stage('Use Vault Secrets') {
            steps {
                script {
                    // Récupérer un secret de Vault
                    def secret = sh(script: 'vault kv get -field=value secret/my-secret', returnStdout: true).trim()
                    echo "Vault secret: ${secret}"  // Utiliser le secret récupéré
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully. Ready for production.'
        }
        failure {
            echo 'Pipeline failed. Resolve issues before production deployment.'
        }
    }
}
