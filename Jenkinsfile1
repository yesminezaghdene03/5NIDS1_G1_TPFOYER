pipeline {
    agent any

    environment {
        // Déclaration des variables d'environnement, y compris pour SonarQube et autres outils
        SONAR_HOST_URL = 'http://192.168.33.10:9000'
        SONAR_PROJECT_KEY = 'tp-foyer'
        SONAR_LOGIN = credentials('sonar-token')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Pre-Commit') {
            steps {
                script {
                    // Utiliser python3 pour créer l'environnement virtuel
                    sh 'python3 -m venv venv'
                    sh '. venv/bin/activate && pip install pre-commit && pre-commit install'
                    sh '. venv/bin/activate && pre-commit run --all-files'
                }
            }
        }

        stage('Static Code Analysis: SonarQube') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh """
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_LOGIN}
                        """
                    }
                }
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                sh 'dependency-check --scan . --format XML --out dependency-check-report.xml'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t your-docker-image-name .'
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        sh 'docker push your-docker-image-name'
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy'
            }
        }
    }

    post {
        always {
            echo 'Build finished'
            emailext(
                to: 'aminedridia9@gmail.com',
                subject: "Jenkins Build - ${currentBuild.fullDisplayName}",
                body: "Le build ${currentBuild.fullDisplayName} s'est terminé avec le statut : ${currentBuild.currentResult}"
            )
        }
    }
}
