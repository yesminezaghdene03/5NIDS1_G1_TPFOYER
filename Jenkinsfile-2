pipeline {
    agent any

    environment {

        NEXUS_URL = 'http://192.168.33.10:8081' // Replace with your Nexus URL
        NEXUS_REPO = 'maven-releases' // Replace with your Nexus repository name


    }

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }

        stage('Clone Repository') {
            steps {
                echo 'Pulling Repository'
                git url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER.git', branch: 'WassimBELHAJSALEM-5NIDS1-G1'
            }
        }

        stage('Pre-Commit Checks') {
            steps {
                echo 'Running Secrets Detection'
                sh 'gitleaks detect --source . || true'  // Runs GitLeaks to detect secrets
            }
        }

        stage('Clean') {
            steps {
                sh 'mvn clean'
            }
        }

        stage('Compile with Maven') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('Package without Tests') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube Analysis'
                // Run SonarQube analysis with specified project key, host URL, and token

                      withSonarQubeEnv(installationName: 'sq1') {

                             sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar'
                           }
            }
        }

        stage('Dependency Security Scan') {
            steps {
                echo 'Running Dependency Check'
                sh 'mvn org.owasp:dependency-check-maven:check'  // Scans dependencies for known vulnerabilities
            }
        }

        stage('Deploy to Nexus') {
    steps {
        echo 'Deploying to Nexus'

        // Check if the JAR file exists
        script {
            if (!fileExists('target/tp-foyer-5.0.0.jar')) {
                error("The JAR file does not exist: target/tp-foyer-5.0.0.jar.original")
            }
        }

        // Deploy the file to Nexus
        withCredentials([usernamePassword(credentialsId: 'nexusCredential', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
        sh """
        mvn -s /usr/share/maven/conf/settings.xml deploy:deploy-file \
          -DgroupId=com.example \
          -DartifactId=tp-foyer \
          -Dversion=5.0.0 \
          -Dpackaging=jar \
          -Dfile=target/tp-foyer-5.0.0.jar \
          -DrepositoryId=deploymentRepo \
          -Durl=$NEXUS_URL/repository/$NEXUS_REPO/ \
          -Dusername=$NEXUS_USERNAME \
          -Dpassword=$NEXUS_PASSWORD
        """
        }
    }
}

        stage('Image') {
            steps {
                echo 'Creating Docker Image'
                sh 'docker build -t wassimbhs/tp-foyer:1.0.0 .'
            }
        }

    stage('Trivy DB Update') {
        steps {
            echo 'Updating Trivy Vulnerability Database'
            sh 'trivy image --download-db-only'
        }
    }

    stage('Container Security Scan') {
        steps {
            echo 'Running Container Security Scan'
            sh 'TRIVY_TIMEOUT=5m trivy image --skip-update --severity HIGH wassimbhs/tp-foyer:1.0.0'
        }
    }

            stage('Dockerhub') {
            steps {
                echo 'Push Image to dockerhub : ';
                    withCredentials([usernamePassword(credentialsId: 'dockerhubCredential', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                           sh """
                               echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                               docker push "$DOCKER_USERNAME/tp-foyer:1.0.0"
                           """
                       }
            }
        }

        stage('Docker-Compose') {
            steps {
                echo 'Starting Backend + DB'
                sh 'docker compose up -d'
            }
        }

stage('Quick Scan with Nikto') {
    steps {
        script {
            // Run a Nikto scan against your web application
            sh "nikto -h http://localhost:8080"
        }
    }
}
stage('Start Prometheus') {
            steps {
                script {
                    sh 'docker start prometheus'
                }
            }
        }

        stage('Start Grafana') {
            steps {
                script {
                    sh 'docker start grafana'
                }
            }
        }




    }

    post {
        failure {
            mail to: 'wassimbhs303@gmail.com',
                 subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The build job '${env.JOB_NAME}' failed at build #${env.BUILD_NUMBER}. Please check the logs for details."
        }
    }
}
