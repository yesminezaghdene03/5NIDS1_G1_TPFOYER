pipeline {
    agent any
    environment {
        SONARQUBE_SERVER = 'http://192.168.33.10:9000'  // Adresse de votre serveur SonarQube
        SONAR_TOKEN = 'your_generated_token'             // Remplacez par votre token SonarQube
    }
    stages {
        stage('Pre-Commit') {
            steps {
                script {
                    // Créer le fichier .pre-commit-config.yaml si nécessaire
                    writeFile file: '.pre-commit-config.yaml', text: '''
                    - repo: https://github.com/find-sec-bugs/find-sec-bugs
                      rev: v1.13.0
                      hooks:
                        - id: find-sec-bugs
                          args: ['-includeFilters', 'OWASP-A1', 'OWASP-A2']
                    '''
                    
                    // Installer et exécuter pre-commit avec FindSecurityBugs
                    sh '''
                        python -m venv venv  # Crée un environnement virtuel
                        source venv/bin/activate  # Active l'environnement virtuel
                        pip install pre-commit  # Installe pre-commit
                        pre-commit install  # Installe les hooks de pre-commit
                        pre-commit run --all-files  # Exécute l'analyse de sécurité FindSecurityBugs sur tous les fichiers
                    '''
                }
            }
        }
        stage('Static Code Analysis: SonarQube') {
            steps {
                echo "Running SonarQube analysis"
                sh '''
                    mvn clean install sonar:sonar -Dsonar.host.url=${SONARQUBE_SERVER} -Dsonar.login=${SONAR_TOKEN}
                '''
            }
        }
        stage('JUnit/Mockito Tests') {
            steps {
                echo "Running Unit Tests"
                sh 'mvn test'  // Exécute les tests unitaires via Maven
            }
        }
        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                echo "Running OWASP Dependency-Check"
                sh 'mvn org.owasp:dependency-check-maven:check'  // Exécute l'analyse OWASP Dependency-Check
            }
        }
        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image"
                sh 'docker build -t your-image-name .'  // Remplacez par la commande Docker appropriée
            }
        }
        stage('Push Docker Image to DockerHub') {
            steps {
                echo "Pushing Docker Image to DockerHub"
                sh 'docker push your-image-name'  // Remplacez par la commande de push Docker
            }
        }
        stage('Run Docker Compose') {
            steps {
                echo "Running Docker Compose"
                sh 'docker-compose up -d'  // Lancement de Docker Compose
            }
        }
        stage('Deploy to Nexus') {
            steps {
                echo "Deploying to Nexus"
                sh 'mvn deploy'  // Déploiement sur Nexus
            }
        }
    }
    post {
        always {
            echo 'Build finished'  // Message indiquant la fin du build
        }
        success {
            emailext (
                subject: "Build Success: ${currentBuild.fullDisplayName}",
                body: "The Jenkins build was successful. All steps completed successfully.",
                to: "aminedridia9@gmail.com"  // Adresse email de notification en cas de succès
            )
        }
        failure {
            emailext (
                subject: "Build Failure: ${currentBuild.fullDisplayName}",
                body: "The Jenkins build has failed. Please check the logs for details.",
                to: "aminedridia9@gmail.com"  // Adresse email de notification en cas d'échec
            )
        }
    }
}
