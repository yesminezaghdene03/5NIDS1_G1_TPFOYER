pipeline {
    agent any

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Ajoute ici ton code pour construire l'image Docker
                    // Exemple :
                    // sh 'docker build -t my-image .'
                }
            }
        }
        
        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    // Ajoute ici ton code pour pousser l'image Docker sur DockerHub
                    // Exemple :
                    // sh 'docker push my-image'
                }
            }
        }
        
        stage('Docker Compose Down') {
            steps {
                script {
                    // Ajoute ici ton code pour arrêter les conteneurs Docker
                    // Exemple :
                    // sh 'docker-compose down'
                }
            }
        }

        stage('Docker Compose Up') {
            steps {
                script {
                    // Ajoute ici ton code pour démarrer les conteneurs Docker
                    // Exemple :
                    // sh 'docker-compose up -d'
                }
            }
        }

        stage('Prometheus') {
            steps {
                script {
                    // Ajoute ici ton code pour l'intégration avec Prometheus
                    // Exemple :
                    // sh 'curl -s -X POST http://prometheus-server:9090'
                }
            }
        }

        stage('Grafana') {
            steps {
                script {
                    // Ajoute ici ton code pour l'intégration avec Grafana
                    // Exemple :
                    // sh 'curl -s -X POST http://grafana-server:3000'
                }
            }
        }

        stage('Cleanup Old Docker Images') {
            steps {
                script {
                    // Ajoute ici ton code pour nettoyer les anciennes images Docker
                    // Exemple :
                    // sh 'docker image prune -f'
                }
            }
        }
    }

    post {
        always {
            emailext (
                to: 'aminedridia9@gmail.com',
                subject: "Build Status: ${currentBuild.currentResult}",
                body: "The build ${currentBuild.fullDisplayName} has finished with status: ${currentBuild.currentResult}"
            )
        }
    }
}
