pipeline {
    agent any

    environment {
        NEXUS_URL = "http://192.168.50.4:8081/repository/myRepo/"
        NEXUS_CREDENTIAL_ID = "nexusCredential"
        DOCKER_COMPOSE_VERSION = '1.29.2'
        DOCKER_IMAGE_NAME = 'emna0203/emnabelkhiria-5nids1'  // Correction du nom d'image Docker
        DOCKER_TAG = 'latest'
        SONARQUBE_TOKEN = 'sqp_bc225e0c7bd8daa746a774a9dcc9a6e5cd548f0e'
    }

    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'EmnaBelkhiria_NIDS1_G1', url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Package') {
            steps {
                sh 'mvn package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube Server') {
                    sh "mvn sonar:sonar -Dsonar.projectKey=5NIDS1_G1_TPFOYER -Dsonar.projectName='5NIDS1_G1_TPFOYER' -Dsonar.login=${SONARQUBE_TOKEN}"
                }
            }
        }

        stage('Deployment Nexus') {
            steps {
                sh "mvn deploy -Dmaven.test.skip=true -DaltDeploymentRepository=deploymentRepo::default::${NEXUS_URL}"
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Construire l'image Docker avec le fichier Dockerfile
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    // Utiliser les credentials Docker créés
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials-id', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Se connecter au registre Docker
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"

                        // Pousser l'image Docker vers le registre
                        sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Démarrer les services via docker-compose
                    sh "docker-compose up -d"
                    // Vérification que les conteneurs sont bien démarrés
                    sh "docker-compose ps"
                }
            }
        }

        stage('Docker Bench Security Check') {
            steps {
                script {
                    // Exécuter Docker Bench pour analyser la sécurité du conteneur
                    sh 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --security-opt seccomp=unconfined --name docker-bench -v $PWD:/tmp docker/docker-bench-security > docker-bench-report.txt'
                }
            }
        }

        stage('Archive Report') {
            steps {
                archiveArtifacts artifacts: 'docker-bench-report.txt', allowEmptyArchive: true
            }
        }

        stage('View Report') {
            steps {
                sh "cat docker-bench-report.txt"
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // Récupérer dynamiquement le nom du réseau Docker Compose
                    def networkName = sh(script: "docker network ls --filter 'driver=bridge' --format '{{.Name}}' | grep '_default'", returnStdout: true).trim()

                    if (networkName) {
                        echo "Le réseau Docker Compose est : ${networkName}"
                        // Supprimer les services et le réseau Docker Compose
                        sh "docker-compose down"
                    } else {
                        echo "Aucun réseau Docker Compose trouvé."
                    }

                    // Nettoyer le système Docker
                    sh 'docker system prune -f'
                }
            }
        }

        stage('Nmap Open Port Verification') {
                    steps {
                        script {
                            sleep(time: 2, unit: 'MINUTES')
                            // Get container IP address from Docker
                            def containerIP = sh(script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' tp_foyer_app", returnStdout: true).trim()

                            // If the IP is empty, handle the error
                            if (!containerIP) {
                                error("Failed to resolve container IP address.")
                            }

                            def allowedPort = 8089
                            // Run nmap and save output to a file
                            def nmapOutput = sh(script: "nmap -p- ${containerIP}", returnStdout: true).trim()

                            // Output raw Nmap scan for debugging purposes
                            echo "Raw Nmap scan output:\n${nmapOutput}"
                            // Find open ports using regex
                            def openPorts = []
                            def lines = nmapOutput.split('\n')
                            for (int i = 0; i < lines.size(); i++) {
                                def line = lines[i].trim()
                                if (line.contains("open")) {
                                    def parts = line.split("\\s+")
                                    if (parts.length > 0) {
                                        def portInfo = parts[0]  // This should be "8089/tcp"
                                        def portNumber = portInfo.split("/")[0]  // Extract the port number
                                        echo "Found open port: ${portNumber}"
                                        openPorts.add(portNumber as Integer)
                                    }
                                }
                            }
                            echo "Open ports: ${openPorts.join(', ')}"
                            /*if (openPorts.any { it != allowedPort }) {
                                error("Build failed: Ports other than ${allowedPort} are open.")
                            } else {
                                echo "Only port ${allowedPort} is open. Proceeding with the build."
                            }*/
                            if (openPorts.size() != 1 || openPorts[0] != allowedPort) {
                                error("Build failed: Ports other than ${allowedPort} are open.")
                            } else {
                                echo "Only port ${allowedPort} is open. Proceeding with the build."
                            }
                        }
                    }
                }


    post {
        always {
            script {
                // Nettoyage après l'exécution du pipeline
                def networkName = sh(script: "docker network ls --filter 'driver=bridge' --format '{{.Name}}' | grep '_default'", returnStdout: true).trim()
                if (networkName) {
                    echo "Le réseau Docker Compose est : ${networkName}"
                    sh "docker-compose down"
                } else {
                    echo "Aucun réseau Docker Compose trouvé."
                }
                sh 'docker system prune -f'
            }
        }
    }
}
