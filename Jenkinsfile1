pipeline {
    agent any

    environment {
        // Définir les variables d'environnement si nécessaire
        PYTHON_VENV_DIR = "venv"
        DOCKER_IMAGE_NAME = "my_docker_image"
        DOCKER_HUB_REPO = "dockerhub_user/my_docker_repo"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Python3 Venv') {
            steps {
                script {
                    echo "Vérification de l'installation de python3-venv"
                    sh '''
                        if ! dpkg -s python3-venv > /dev/null 2>&1; then
                            echo "python3-venv n'est pas installé. Installation en cours."
                            sudo apt-get update && sudo apt-get install -y python3-venv
                        else
                            echo "python3-venv déjà installé."
                        fi
                    '''
                }
            }
        }

        stage('Pre-commit Security Hooks') {
            steps {
                script {
                    echo "Vérification des hooks de sécurité pre-commit"
                    sh '''
                        echo "Installation de pre-commit dans un environnement virtuel..."
                        python3 -m venv ${PYTHON_VENV_DIR}
                        source ${PYTHON_VENV_DIR}/bin/activate
                        pip install pre-commit
                        pre-commit install
                    '''
                }
            }
        }

        stage('Compile') {
            steps {
                echo 'Compilation du projet...'
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                echo 'Exécution des tests unitaires...'
                // Remplace par la commande réelle pour les tests
            }
        }

        stage('Scan: SonarQube') {
            steps {
                echo 'Scan du projet avec SonarQube...'
                // Ajoute les étapes pour l'intégration SonarQube ici
            }
        }

        stage('Security Scan: Trufflehog') {
            steps {
                echo 'Scan de sécurité avec Trufflehog...'
                // Ajoute les étapes de Trufflehog ici
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Build de l'image Docker..."
                    sh '''
                        docker build -t ${DOCKER_IMAGE_NAME} .
                    '''
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    echo "Push de l'image Docker sur DockerHub..."
                    sh '''
                        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                        docker push ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_NAME}
                    '''
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                echo 'Exécution de Docker Compose...'
                sh '''
                    docker-compose up -d
                '''
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo 'Déploiement sur Nexus...'
                // Ajoute les étapes de déploiement Nexus ici
            }
        }

        stage('Post Actions') {
            steps {
                echo 'Exécution des actions post-build...'
                // Ajoute les actions après le build ici
            }
        }
    }

    post {
        always {
            echo 'Pipeline terminé.'
        }
        success {
            echo 'Le build a réussi.'
        }
        failure {
            echo 'Le build a échoué.'
        }
    }
}
