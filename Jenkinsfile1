pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-credentials')
        NEXUS_CREDENTIALS = credentials('nexus-credentials')
        SONARQUBE_CREDENTIALS = credentials('sonar-token')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Pre-Commit') {
            steps {
                script {
                    // Désactive core.hooksPath pour permettre l'installation de pre-commit dans .git/hooks
                    sh 'git config --unset-all core.hooksPath'

                    // Installe pre-commit et exécute les hooks
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install pre-commit
                        pre-commit install
                        pre-commit run --all-files
                    '''
                }
            }
        }

        stage('Static Code Analysis: SonarQube') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        mvn sonar:sonar \
                        -Dsonar.projectKey=tp-foyer \
                        -Dsonar.host.url=http://sonarqube:9000 \
                        -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                sh 'mvn org.owasp:dependency-check-maven:check'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_HUB_CREDENTIALS) {
                        sh 'docker build -t myapp:${BUILD_NUMBER} .'
                    }
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
                        sh 'docker push myapp:${BUILD_NUMBER}'
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh '''
                        mvn deploy:deploy-file \
                        -DgroupId=com.example \
                        -DartifactId=myapp \
                        -Dversion=1.0 \
                        -Dpackaging=jar \
                        -Dfile=target/myapp.jar \
                        -DrepositoryId=nexus \
                        -Durl=http://nexus:8081/repository/maven-releases \
                        -Dusername=$NEXUS_USERNAME \
                        -Dpassword=$NEXUS_PASSWORD
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Build finished'
            emailext to: 'aminedridia9@gmail.com',
                     subject: "Build ${currentBuild.fullDisplayName}",
                     body: "The build ${currentBuild.fullDisplayName} finished with status: ${currentBuild.currentResult}"
        }
    }
}
