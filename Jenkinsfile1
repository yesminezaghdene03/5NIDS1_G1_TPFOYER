pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        SONAR_TOKEN = credentials('jenkins-token') // Token SonarQube pour analyse
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER', branch: 'AmineDridia_5NIDS1_G1'
            }
        }

        stage('Pre-Commit') {
            steps {
                script {
                    // Création et activation de l'environnement virtuel pour pre-commit
                    sh 'python3 -m venv venv'
                    sh '. venv/bin/activate'
                    sh 'pip install pre-commit'
                    sh 'pre-commit install'
                    sh 'pre-commit run --all-files'
                }
            }
        }

        stage('Static Code Analysis: FindSecurityBugs') {
            steps {
                script {
                    // Exécuter FindSecurityBugs avec Gradle
                    def securityCheck = sh(script: './gradlew findbugsMain', returnStatus: true)
                    if (securityCheck != 0) {
                        error "FindSecurityBugs analysis failed!"
                    }
                }
            }
        }

        stage('Static Code Analysis: SonarQube') {
            steps {
                script {
                    // Lancer l'analyse SonarQube
                    withSonarQubeEnv('SonarQube') {
                        sh "mvn clean install sonar:sonar -Dsonar.login=${SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                script {
                    // Exécuter les tests unitaires JUnit
                    sh 'mvn test'
                }
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                script {
                    // Analyser les dépendances avec OWASP Dependency-Check
                    sh './mvnw dependency-check:check'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Construire l'image Docker
                    sh 'docker build -t aminedridia/5nids1g1_tpfoyer:latest .'
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    // Push l'image Docker vers DockerHub
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                        sh 'docker push aminedridia/5nids1g1_tpfoyer:latest'
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    // Exécuter Docker Compose pour déployer les conteneurs
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    // Déployer l'artifact sur Nexus
                    sh 'mvn deploy'
                }
            }
        }
    }

    post {
        always {
            echo 'Build finished'
            emailext subject: "Build Finished", to: 'aminedridia9@gmail.com', body: 'The build has completed successfully.'
        }

        failure {
            echo 'Build failed'
            emailext subject: "Build Failed", to: 'aminedridia9@gmail.com', body: 'The build has failed. Please check the logs for details.'
        }
    }
}
