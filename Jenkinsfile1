pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        SONAR_TOKEN = credentials('sonar-token')
    }
    stages {
        stage('Clone Repository') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/AmineDridia_5NIDS1_G1']], 
                    userRemoteConfigs: [[url: 'https://github.com/yesminezaghdene03/5NIDS1_G1_TPFOYER']]
                ])
            }
        }
        
        stage('Pre-Commit') {
            steps {
                script {
                    sh '''
                        python3 -m venv venv
                        source venv/bin/activate
                        pip install pre-commit
                        git config --unset-all core.hooksPath
                        pre-commit install
                        pre-commit run --all-files
                    '''
                }
            }
        }
        
        stage('Static Code Analysis: SonarQube') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn clean verify sonar:sonar -Dsonar.login=${SONAR_TOKEN}'
                }
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                sh 'mvn dependency-check:check'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("aminedridia/tp-foyer:${env.BUILD_ID}")
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        def customImage = docker.image("aminedridia/tp-foyer:${env.BUILD_ID}")
                        customImage.push()
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy'
            }
        }
    }

    post {
        success {
            echo 'Build succeeded'
        }
        failure {
            echo 'Build finished'
            emailext(
                to: 'aminedridia9@gmail.com',
                subject: "Build Failed in Jenkins Pipeline ${env.BUILD_ID}",
                body: "Something went wrong. Please check the Jenkins job for details."
            )
        }
    }
}
