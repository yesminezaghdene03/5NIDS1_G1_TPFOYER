pipeline {
    agent any

    environment {
        IMAGE_NAME = 'my-image'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REPO = 'library' // Remplace par ton propre nom de repo si nécessaire
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME} .'
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    // Se connecter à Docker Hub avec des informations d'identification stockées dans Jenkins
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin'
                    }
                    // Pousser l'image Docker
                    sh 'docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}'
                }
            }
        }

        stage('Docker Compose Down') {
            steps {
                script {
                    // Optionnel: Ajoute ici des commandes pour stopper les conteneurs Docker si nécessaire
                    sh 'docker-compose down'
                }
            }
        }

        stage('Docker Compose Up') {
            steps {
                script {
                    // Optionnel: Ajoute ici des commandes pour démarrer les conteneurs Docker
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Prometheus') {
            steps {
                script {
                    // Ajoute ici les étapes pour configurer Prometheus
                    sh 'echo "Configure Prometheus here"'
                }
            }
        }

        stage('Grafana') {
            steps {
                script {
                    // Ajoute ici les étapes pour configurer Grafana
                    sh 'echo "Configure Grafana here"'
                }
            }
        }

        stage('Cleanup Old Docker Images') {
            steps {
                script {
                    // Optionnel: Nettoyer les images Docker plus anciennes si nécessaire
                    sh 'docker image prune -f'
                }
            }
        }

        stage('Declarative: Post Actions') {
            steps {
                emailext(
                    to: 'aminedridia9@gmail.com',
                    subject: 'Build Completed',
                    body: 'The Jenkins pipeline has completed successfully.',
                    attachLog: true
                )
            }
        }
    }
}
