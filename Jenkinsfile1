pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Vérifier le code depuis le dépôt Git
                checkout scm
            }
        }

        stage('Pre-Commit') {
            steps {
                script {
                    // Préparer l'environnement Python et installer les outils nécessaires
                    sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install pre-commit
                    pre-commit install
                    '''
                }
            }
        }
        
        stage('Static Code Analysis: FindSecurityBugs') {
            steps {
                script {
                    // Exécuter l'analyse de sécurité avec FindSecurityBugs
                    sh 'mvn clean compile findbugs:findbugs'
                }
            }
        }

        stage('Static Code Analysis: SonarQube') {
            steps {
                script {
                    // Lancer l'analyse SonarQube
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                script {
                    // Exécuter les tests unitaires JUnit avec Mockito
                    sh 'mvn test'
                }
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                script {
                    // Lancer le scan OWASP Dependency-Check
                    sh 'mvn org.owasp:dependency-check-maven:check'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Se connecter à DockerHub via les credentials Jenkins et construire l'image
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh '''
                        docker build -t ${DOCKER_USERNAME}/my-app .
                        '''
                    }
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    // Se connecter à DockerHub et pousser l'image
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh '''
                        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        docker push ${DOCKER_USERNAME}/my-app
                        '''
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    // Lancer les services avec Docker Compose
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    // Déployer l'application sur Nexus
                    sh 'mvn deploy'
                }
            }
        }
    }

    post {
        always {
            // Envoyer une notification par email
            emailext(
                subject: "Build ${currentBuild.currentResult}: ${currentBuild.fullDisplayName}",
                body: "The build is complete. Check the Jenkins dashboard for more details.",
                to: "aminedridia9@gmail.com"
            )
        }
    }
}
