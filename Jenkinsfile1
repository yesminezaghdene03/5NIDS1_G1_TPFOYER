pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: 'M2_Home', 
        PYTHON_VENV = 'venv'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Python3 Venv') {
            steps {
                script {
                    // Vérifier et installer python3-venv dans l'environnement Docker si nécessaire
                    echo "Vérification de l'installation de python3-venv"
                    sh '''
                        if ! dpkg -s python3-venv > /dev/null 2>&1; then
                            echo "python3-venv n'est pas installé. Installation en cours."
                            sudo apt-get update && sudo apt-get install -y python3-venv
                        else
                            echo "python3-venv déjà installé."
                        fi
                    '''
                }
            }
        }

        stage('Pre-commit Security Hooks') {
            steps {
                script {
                    echo "Vérification des hooks de sécurité pre-commit"
                    sh '''
                        echo "Installation de pre-commit dans un environnement virtuel..."
                        python3 -m venv ${PYTHON_VENV}
                        source ${PYTHON_VENV}/bin/activate
                        pip install pre-commit
                        pre-commit install
                    '''
                }
            }
        }

        stage('Compile') {
            steps {
                echo 'Compilation du projet...'
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                echo 'Exécution des tests unitaires...'
            }
        }

        stage('JaCoCo Report') {
            steps {
                echo 'Génération du rapport JaCoCo...'
            }
        }

        stage('JaCoCo coverage report') {
            steps {
                echo 'Analyse de la couverture JaCoCo...'
            }
        }

        stage('Scan: SonarQube') {
            steps {
                echo 'Exécution de l’analyse SonarQube...'
            }
        }

        stage('Security Scan: Trufflehog') {
            steps {
                echo 'Exécution du scan Trufflehog...'
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                echo 'Exécution du scan OWASP Dependency-Check...'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo 'Déploiement vers Nexus...'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Construction de l’image Docker...'
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo 'Push de l’image Docker vers DockerHub...'
            }
        }

        stage('Run Docker Compose') {
            steps {
                echo 'Exécution de Docker Compose...'
            }
        }

        stage('Declarative: Post Actions') {
            steps {
                mail to: 'aminedridia9@gmail.com',
                     subject: "Build ${currentBuild.fullDisplayName} - ${currentBuild.result}",
                     body: "Le résultat du build est ${currentBuild.result}."
            }
        }
    }

    post {
        always {
            echo 'Pipeline terminé.'
        }

        success {
            echo 'Le build a réussi.'
        }

        failure {
            echo 'Le build a échoué.'
        }
    }
}
