pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'http://192.168.33.10:9000'
        EMAIL_RECIPIENT = 'aminedridia9@gmail.com'
    }

    stages {
        stage('Pre-commit Security Hooks') {
            steps {
                script {
                    echo "Vérification des hooks de sécurité pre-commit"
                    sh '''
                        echo "Installation de pre-commit dans un environnement virtuel..."
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install pre-commit
                        git config --unset-all core.hooksPath
                        pre-commit install
                    '''
                }
            }
        }

        stage('Compile') {
            steps {
                echo "Compilation du code"
                // Ajoutez ici les commandes de compilation si nécessaire
            }
        }

        stage('Static Code Analysis: SonarQube') {
            steps {
                echo "Analyse SonarQube du code"
                script {
                    // Commande pour lancer l'analyse SonarQube
                    sh 'mvn clean install sonar:sonar -Dsonar.host.url=${SONARQUBE_SERVER}'
                }
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                echo "Exécution des tests JUnit/Mockito"
                // Ajoutez ici les commandes pour exécuter les tests
            }
        }

        stage('Security Scan: OWASP Dependency-Check') {
            steps {
                echo "Scan de sécurité avec OWASP Dependency-Check"
                // Ajoutez ici les commandes pour le scan OWASP Dependency-Check
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Création de l'image Docker"
                // Ajoutez ici les commandes pour créer l'image Docker
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo "Push de l'image Docker vers DockerHub"
                // Ajoutez ici les commandes pour pousser l'image Docker vers DockerHub
            }
        }

        stage('Run Docker Compose') {
            steps {
                echo "Exécution de Docker Compose"
                // Ajoutez ici les commandes pour exécuter Docker Compose
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo "Déploiement vers Nexus"
                // Ajoutez ici les commandes pour déployer vers Nexus
            }
        }

        stage('Post Actions') {
            steps {
                echo "Actions post-build"
                // Ajoutez ici les actions post-build nécessaires
            }
        }
    }

    post {
        success {
            echo "Pipeline terminé avec succès"
            emailext(
                subject: "Build Jenkins réussi",
                body: "Le build Jenkins a été exécuté avec succès.",
                to: "${EMAIL_RECIPIENT}"
            )
        }
        failure {
            echo "Le build a échoué"
            emailext(
                subject: "Build Jenkins échoué",
                body: "Le build Jenkins a échoué. Veuillez consulter les logs pour plus de détails.",
                to: "${EMAIL_RECIPIENT}"
            )
        }
    }
}
